@import "../variables/props";
@import "../variables/animations";

/* Animations mixin.
Mixin that applies animation along with the background color that are passed as arguments.
--------------------------------------------------------------------------------*/
@mixin mixin-sm-animate-loading($animation, $animationColor, $backgroundColor) {
  /* We don't need the background color of the element (with the ".sm-item-primary" or ".sm-item-secondary" classes) for this type of animation.
  Because the animation will be applied to the ":before" pseudo-element, and will change its opacity.
  --------------------------------------------------------------------------------*/
  @if $animation == $--sm-animation-pulse {
    background: unset;
  } @else {
    background: rgba($backgroundColor);
  }

  &:before {
    animation: $animation;

    @if $animation == $--sm-animation-pulse or $animation == $--sm-animation-none {
      background: rgba($backgroundColor);
    } @else {
      background: linear-gradient(90deg, transparent 40%, $animationColor 50%, transparent 60%);
    }

    /* Since the “animation-delay” property is used for animation,
    it is necessary to set the starting position.
    --------------------------------------------------------------------------------*/
    @if $animation == $--sm-animation-wave {
      transform: translateX(-100%);
    } @else if $animation == $--sm-animation-wave-reverse {
      transform: translateX(100%);
    } @else {
      transform: unset;
    }

    /* Accessibility.
    Disable animations if a user's device settings are set to reduced motion.
    https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion
    Should be duplicated here due to the CSS rule precedence.
    --------------------------------------------------------------------------------*/
    @media (prefers-reduced-motion) {
      animation: $--sm-animation-none;
      background: rgba($backgroundColor);
    }
  }
}
